constants:
  test: "test"
# For each row, create an Earthquake with specified URI.
root:
  type: ["kwg-ont:Earthquake", "geo:Feature", "kwg-ont:Hazard"]
  uri: "kwgr:earthquake"
  varids: ["id"] # this will be a . joined string (i.e., 1.a.BA), where each element comes from the field indicated in the list
  connections:
    - p: "sosa:isFeatureOfInterestOf"
      inv: "sosa:hasFeatureOfInterest"
      o: 
        type: "kwg-ont:EarthquakeObservationCollection"
        uri: "kwgr:earthquakeObservationCollection"
        varids: ["id"]
        connections:
          - p: "sosa:phenomenonTime"
            o:
              uri: "kwgr:instant"
              varids: ["id"]
              ref: true
          - p: "sosa:hasMember"
            inv: "sosa:isMemberOf"
            o: 
              type: "kwg-ont:EarthquakeObservation"
              uri: "kwgr:earthquakeObservation"
              varids: ["id"]
              appellation: "mag"
              connections:
                - p: "sosa:observedProperty"
                  o: "kwgr:earthquakeObservableProperty.mag"
                - p: "sosa:hasSimpleResult"
                  o: 
                    datatype: "xsd:double"
                    val_source: "mag"
          - p: "sosa:hasMember"
            o: 
              type: "kwg-ont:EarthquakeObservation"
              uri: "kwgr:earthquakeObservation"
              varids: ["id"]
              appellation: "depth"
              connections:
                - p: "sosa:observedProperty"
                  o: "kwgr:earthquakeObservableProperty.depth"
                - p: "sosa:hasSimpleResult"
                  o: 
                    datatype: "rdfs:Literal"
                    val_source: "depth"
    - p: "kwg-ont:hasTemporalScope"
      o: 
        type: "time:Instant"
        uri: "kwgr:instant"
        varids: ["id"]
        connections:
          - p: "time:inXSDDateTime"
            o:
              datatype: "xsd:dateTime"
              val_source: "time"